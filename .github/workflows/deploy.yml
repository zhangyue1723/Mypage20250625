name: Deploy to Server

on:
  push:
    branches:
      - main

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Deploy to Server
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USERNAME }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            # Navigate to the app directory
            cd /var/www/mypage

            # The git pull might fail if there are untracked local changes.
            # A hard reset ensures the server is a perfect mirror of the repo.
            git fetch --all
            git reset --hard origin/main
            git pull origin main

            # We are now deploying a pre-built package.
            # We must ensure the server has the exact same node_modules
            # that were used to create the build.
            echo "--- Installing dependencies to match the build env ---"
            npm install

            # No more build steps on the server.
            # Just restart the application.
            echo "--- Restarting application with PM2... ---"
            pm2 restart mypage || pm2 start "npm start" --name mypage
            echo "--- Deployment script finished. ---"

      - name: Create Deploy Directory
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: mkdir -p /var/www/mypage

      - name: Deploy files via rsync
        run: |
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > private_key.pem
          chmod 600 private_key.pem
          rsync -avz --delete \
            -e "ssh -o StrictHostKeyChecking=no -i private_key.pem" \
            --exclude ".git*" \
            --exclude "node_modules" \
            --exclude ".next" \
            ./ ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_HOST }}:/var/www/mypage/
          rm private_key.pem

      - name: Build and Restart on Server
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          port: 22
          script: |
            # Navigate to the project directory
            cd /var/www/mypage

            # Aggressive cleanup to ensure a pristine environment
            echo "--- Cleaning up old artifacts ---"
            rm -rf .next
            rm -rf node_modules
            
            # Create the production .env file
            echo "DATABASE_URL='file:./prisma/dev.db'" > .env
            echo "JWT_SECRET=${{ secrets.JWT_SECRET }}" >> .env
            
            # Install all dependencies and build *on the server*
            npm install

            # Run prisma db push
            npx prisma db push

            # Build the Next.js application with explicit error handling
            echo "--- Starting application build... ---"
            npm run build
            BUILD_EXIT_CODE=$?
            echo "--- Build process finished with exit code: $BUILD_EXIT_CODE ---"

            if [ $BUILD_EXIT_CODE -ne 0 ]; then
              echo "Build failed. Aborting deployment."
              exit 1
            fi

            if [ ! -d ".next" ]; then
              echo "Build directory '.next' not found after successful build. Aborting deployment."
              exit 1
            fi
            
            # Create admin user (idempotent)
            npx ts-node --project prisma/tsconfig.seed.json prisma/registerAdmin.ts

            # --- WORKAROUND FOR PRISMA + NEXT.JS BUNDLER BUG ---
            # Find the actual engine file location in node_modules
            QUERY_ENGINE_SOURCE=$(find ./node_modules -name "libquery_engine-rhel-openssl-1.1.x.so.node" | head -n 1)
            # Copy it to the location where Next.js server expects it
            if [ -f "$QUERY_ENGINE_SOURCE" ]; then
              cp "$QUERY_ENGINE_SOURCE" "./.next/server/"
            fi
            # --- END WORKAROUND ---

            # Restart the application with PM2
            echo "--- Build successful. Restarting application with PM2... ---"
            pm2 restart mypage
            echo "--- Deployment script finished. ---"
            
            # Save the process list
            pm2 save 